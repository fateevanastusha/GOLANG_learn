Проект делится на папки. 

ОСНОВНАЯ ЧАСТЬ ПРИЛОЖЕНИЯ: 
1) cmd - здесь лежат main.go файлы с func main(). Это входные точки в приложение. Каждая входная точка 
лежит в своей папке: 
    - server
    - parser
    - ...
Каждая из них как отдельное приложение, которая использует функционал из internal или pkg.

2) intenal - здесь должна быть вся логика приложения. При стягивании проекта через go get - импортировать
что-либо из этой папки нельзя. Это исключительно внутрення логика приложения. Ограничение находится на
уровне языка.

3) pkg - тоже хранит логику приложения. В отличие от internal отсюда МОЖНО импортировать что-либо. Это
открытая часть приложения. Это свои кастомные библиотек - какие-то функции, утилиты. 

ДРУГИЕ ПАПКИ И ФАЙЛЫ НА ВЕРХНЕМ УРОВНЕ: 
1) configs - тут могут лежать конфиги в каком-то формате (toml, yml). Конфиг приложения. 
2) README.md
3) .env
4) .gitignore
5) Makefile или другой накопитель команд
6) go.mod, go.sum



ОСНОВНАЯ ЛОГИКА ПРИЛОЖЕНИЯ (internal)
1) delivery - верхний слой приложения, на этом уровне принимаем запросы извне. Может содержать подпапки 
http, rpc и так далее (в зависимости от способа получения запроса). Передает запросы на слой ниже - в
сервис.
2) service - бизнес-логика приложения. Например, чтобы зарегистрировать юзера нужно сохранить его в бд, 
отправить имейл. Вот именно он и будет это делать. За то как положить в базу или отправить имейл отвечает
уже другой слой.
3) внешние зависимости (repository, обращение к внешним сервисам). Могут быть подпапки - repository (в нем
тоже могут быть подпапки, например mongodb и psql - несколько бд).
4) domain/models - здесь описываются структуры, каждая сущность (user, place, order, ...)
5) config - здесь объявляются структыр для конфигураций и логика записи конфигураций в них (инициализация
конфигов)
6) server - сам сервер
7) app - точка, где собираются все зависимости (создаются репозитории, сервисы, ...)

    