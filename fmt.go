package main

import "fmt"

func main() {
	/*
		Можно получить данные из консоли. Для этого нужно использовать fmt.Scan(&var), где var - это переменная,
		в которую мы записываем результат.
	*/
	var name string
	var age int
	fmt.Print("Введите имя: ")
	fmt.Scan(&name)
	fmt.Print("Введите возраст: ")
	fmt.Scan(&age)

	fmt.Println(name, age)

	/*
		Можно так же прочитать сразу несколько переменых из консоли через fmt.Scan(&a, &b, &c).
	*/

	var a string
	var b string
	var c string

	fmt.Scan(&a, &b, &c)
	fmt.Println(a, b, c)

	/*

		fmt.Printf() на вход принимает сначала строку форматирования, а только потом переменные для вывода.
		var a rune = 'Ы'
		fmt.Printf("%q", a)
		// вывод: 'Ы'

		спецификаторы:

		%t: для вывода значений типа boolean (true или false)
		%b: для вывода целых чисел в двоичной системе
		%c: для вывода символов, представленных числовым кодом
		%d: для вывода целых чисел в десятичной системе
		%o: для вывода целых чисел в восьмеричной системе
		%q: для вывода символов в одинарных кавычках
		%x: для вывода целых чисел в шестнадцатеричной системе, буквенные символы числа имеют нижний регистр a-f
		%X: для вывода целых чисел в шестнадцатеричной системе, буквенные символы числа имеют верхний регистр A-F
		%U: для вывода символов в формате кодов Unicode, например, U+1234
		%e: для вывода чисел с плавающей точкой в экспоненциальном представлении, например, -1.234456e+78
		%E: тоже самое что %e но в верхнем регистре, например, -1.234456E+78
		%f: для вывода чисел с плавающей точкой, например, 123.456
		%F: то же самое, что и %f
		%g   %e для огромных экспонент, %f в противном случае
		%G    %E для огромных экспонент, %F в противном случае
		%s: для вывода строки
		%p: для вывода значения указателя - адреса в шестнадцатеричном представлении (указатели мы пройдем на следующих уроках)
		%T для вывода типа переменной

		К спецификаторам можно добавлять различные флаги, которые влияют на форматирование значений. Например, число перед спецификатором
		указывает, какую минимальную длину в символах будет занимать выводимое значение. %9f - число с плавающей точкой будет занимать как
		минимум 9 позиций. Если ширина больше, чем требуется значению, то заполняется пробелами. Для чисел с плавающей точкой можно указать
		точность или количество символов в дробной части. Для этого количество символов указывается после точки: %.2f

		1) %f: точность и ширина значения по умолчанию
		2) %9f: ширина - 9 символов и точность по умолчанию (число с плавающей точкой будет занимать как минимум 9 позиций. Если ширина больше,
		чем требуется значению, то заполняется пробелами).
		3) %.2f: ширина по умолчанию и точность - 2 символа
		4) %9.2f: ширина - 9 и точность - 2
		5) %9.f: ширина - 9 и точность - 0

		Также из флагов следует отметить дефис -, который дополняет значение пробелами не слева, как по умолчанию, а справа.

		var a float64 = 100.123456
		fmt.Printf("это число %f типа %T", a, a)
		// вывод: это число 100.123456 типа float64

		var a1 byte = 's'
		var a2 int = 1234
		fmt.Printf("%q %b", a1, a2)
		// вывод: 's' 10011010010


		// использование \n позволяет сделать перенос строки
		var a1 string = "123"
		var a2 string = "1234"
		fmt.Printf("%q \n%s", a1, a2)
		// вывод:
		// "123"
		// 1234
	*/

	/*
		Sprintf - работает так же, как PrintF, за исключением того что она ничего не печатает, а возвращает результат форматирования

		var a float64 = 100.123456789
		result := fmt.Sprintf("%.2f", a)
		fmt.Printf("%q", result) // вывод: "100.12"
			// result будет типа string
	*/
}
