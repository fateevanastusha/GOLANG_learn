package main

func main() {
	/*
		ПЕРЕМЕННЫЕ
	*/

	/*
		переменная - именнованный участок памяти. Для объявления переменной используется ключевое слово var, после которого указывается
		имя переменной, а затем её тип:

		{var} имя_переменной тип_данных

		ИМЯ_ПЕРЕМЕННОЙ - может состоять из цифр, букв и символа подчеркивания (_). Первым должен быть либо _, либо буква (цифра не может).
		Не может совпадать с ключевыми словами: break, case, chan, const, continue, default, defer, else, fallthrough, for, func, go, goto,
		if, import, interface, map, package, range, return, select, struct, switch, type, var. Имя переменной регистрозависимое, поэтому
		переменные с именами hello и Hello - это разные переменные.

		1) объявить переменную:
		var hello string

		2) несколько переменных:
		var a, b, c string
		var (
			name string = "Dima"
			age int = 23
		)

		3) объявить переменную и присвоить:
		var x int = 10
		var c string = "Hello, World!"
		var z float64 = 1.045

		4) можно опустить тип и GO компилятор автоматически определит его на основе присваемого значения:
		var a = 12
		var hello = "Hello"

		5) когда переменная объявляется, но не присваивается в этот момент, то ей автоматически присваивается значение по умолчанию.
		0 — для целочисленных типов, таких как int или int64
		0.0 — для типов с плавающей точкой, таких как float32
		false — для типа bool
		Пустая строка ("") — для типа string
		nil — для указателей и других ссылочных типов

			var x int
			var y string
			var z bool
			fmt.Println(x)  // 0
			fmt.Println(y)  // ""
			fmt.Println(z)  // false

		6) переменную можно объявить кратко (работает только внутри функций, в области видимости пакета - запрещено):
		a := 5 (то же самое что var a int = 5 или var a = 5)



		КОНСТАНТА
		- их значение нельзя изменить после их определения. Устанавливаются один раз и остаются неизменными. Вычисление значений
		констант происходит на этапе компиляции, что помогает уменьшить нагрузку на процессор во время выполнения программы.

		1) объявить:
		const pi float64 = 3.1415

		2) нельзя изменить значение:
		const pi float64 = 3.1415
		pi = 2.7182             // ! Ошибка: значение константы нельзя изменить

		3) можно добавлять в блоке
		const (
			a int = 45
			b float32 = 3.3
		)

		4) если для следующих констант не указаны значения, они будут принимать значения предыдущих констант.

		const (
			A int = 45
			B                        // значение B будет равно 45
			C float32 = 3.3
			D                        // значение D будет равно 3.3
		)

		func main() {
			fmt.Println(A, B, C, D)  // Вывод: 45 45 3.3 3.3
		}

		5) можно использовать iota
		const (
			Sunday = iota
			Monday
			Tuesday
			Wednesday
			Thursday
			Friday
			Saturday
		)

		func main() {
			fmt.Println(Sunday)   // вывод 0
			fmt.Println(Saturday) // вывод 6
		}

		const (
			c0 = iota  // c0 == 0
			c1 = iota  // c1 == 1
			c2 = iota  // c2 == 2
		)
		fmt.Println(c0, c1, c2) // вывод: 0 1 2


		const (
			Sunday = iota
			Monday
			Tuesday
			Wednesday
			Thursday
			Friday
			Saturday
			_  // пропускаем 7
			Add
		)

		fmt.Println(Sunday)   // вывод: 0
		fmt.Println(Saturday) // вывод: 6
		fmt.Println(Add) // вывод: 8



		const (
			u         = iota * 42 // u == 0 (индекс - 0, поэтому 0 * 42 = 0)
			v float64 = iota * 42 // v == 42.0 (индекс - 1, поэтому 1.0 * 42 = 42.0)
			w         = iota * 42 // w == 84  (индекс - 2, поэтому 2 * 42 = 84)
		)

		// переменные ни в одном блоке const, поэтому индекс не увеличился
		const x = iota  // x == 0
		const y = iota  // y == 0

		//неважно где находится iota
		const (
			A int = 45
			B // скопирует А
			C float32 = 3.3
			D // скопирует С
			Sunday = iota
			Monday           //5
			Tuesday			 //6
			Wednesday	     //7
			Thursday
			Friday
			Saturday
		)
	*/

	/*
		УКАЗАТЕЛИ
	*/

	/*
		Указатель (&) - значение, которое указывает на адрес другой переменной.
	*/
	/*

	 */
	a := 200
	var b *int = &a //* - ссылаемся на указатель
	*b++            //* - указывает что мы берем не значение переменной b (а значение - адрес, что-то вроде 0x14000054730), а адрес, куда она ссылается (по 0x14000054730)
	println(a)      //201

	/*
		Таким образом, можно передать в функцию не копию, а само значение!
		func zero(x *int) {
			*x = 100
		}
		func main() {
			x := 5
			zero(&x)
			fmt.Println(x)
		}



		Можно создать указатель на указатель:
		package main

		import "fmt"

		func main() {
		a := 200
		b := &a
		*b++
		c := &b
		**c++ // указатель на указатель
		fmt.Println(a)
		}
	*/
}
